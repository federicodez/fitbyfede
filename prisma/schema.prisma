generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id               String           @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  email            String           @unique
  emailVerified    Boolean          @default(false)
  image            String?
  hashedPassword   String?
  resetToken       String?
  resetTokenExpiry Int?
  subscription     Boolean          @default(false)
  accounts         Account[]
  workouts         Workout[]
  workoutSessions  WorkoutSession[]
  exercises        Exercise[]
  measurements     Measurements[]
}

model Measurements {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  age       Int      @default(0)
  height    String
  weight    Int      @default(0)
  upperArm  Int      @default(0)
  lowerArm  Int      @default(0)
  upperLeg  Int      @default(0)
  lowerLeg  Int      @default(0)
  chest     Int      @default(0)
  abdominal Int      @default(0)
  createdAt DateTime @default(now())
  userId    String   @db.ObjectId
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Workout {
  id               String         @id @default(auto()) @map("_id") @db.ObjectId
  orderId          Int            @default(0)
  name             String
  bodyPart         String
  gifId            String?
  target           String
  equipment        String?
  instructions     String[]
  userId           String         @db.ObjectId
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  lbs              Int[]
  reps             Int[]
  sets             String[]
  notes            String
  workoutSessionId String         @db.ObjectId
  user             User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  WorkoutSession   WorkoutSession @relation(fields: [workoutSessionId], references: [id], onDelete: Cascade)
}

model WorkoutSession {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  time       Int
  notes      String?
  userId     String    @db.ObjectId
  createdAt  DateTime  @default(now())
  workoutIds String[]
  Workout    Workout[]
  User       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Exercise {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  bodyPart  String
  equipment String
  createdAt DateTime @default(now())
  userId    String   @db.ObjectId
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
